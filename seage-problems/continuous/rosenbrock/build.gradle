// /*
//  * This file was generated by the Gradle 'init' task.
//  *
//  * This generated file contains a sample Java application project to get you started.
//  * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
//  * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
//  */

// plugins {
//     // Apply the application plugin to add support for building a CLI application in Java.
//     id 'application'
//     id 'java-library'
//     id 'java-test-fixtures'
// }

// repositories {
//     // Use JCenter for resolving dependencies.
//     jcenter()
//     maven {
//         url "file://$projectDir/../hyflex-lib/repository"
//     }
// }

// dependencies {
//     // Use JUnit Jupiter API for testing.
//     testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

//     // Use JUnit Jupiter Engine for testing.
//     testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

//     // This dependency is used by the application.
//     implementation group: 'com.beust', name: 'jcommander', version: '1.78'
//     implementation group: 'hyflex', name: 'chesc-ps', version: '2019.03.17'
//     implementation group: 'hyflex', name: 'chesc-fixed-no-ps', version: '2019.03.17'

//     implementation project(':hyflex-hh-eph')
//     implementation project(':hyflex-hh-gihh')
//     implementation project(':hyflex-hh-isea')
//     implementation project(':hyflex-hh-leangihh')
//     implementation project(':hyflex-hh-pearlhunter')

//     implementation project(':seage-metaheuristics')
//     implementation project(':seage-problem')
// }

// application {
//     // Define the main class for the application.
//     mainClass = 'hyflex.chesc2011.launcher.Launcher'
// }

// tasks.named('test') {
//     // Use junit platform for unit tests.
//     useJUnitPlatform()
// }

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */
plugins {
  id 'java-library'
  id 'checkstyle'
  id 'maven-publish'
  id "java-test-fixtures"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        jcenter()
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'maven-publish'

    dependencies {
        // Use JUnit Jupiter API for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
        testImplementation 'org.junit.platform:junit-platform-suite-api:1.8.2'
        testRuntimeOnly 'org.junit.platform:junit-platform-suite-engine:1.8.2'

        implementation 'ch.qos.logback:logback-classic:1.3.0-alpha10'
        implementation project(':seage-metaheuristics')
        implementation project(':seage-problem')
    }
    test {
        // Use junit platform for unit tests.
        useJUnitPlatform()
        reports.html.enabled = false
    }
    checkstyle {
        // toolVersion = '8.4.0'
        configFile = file("$rootDir/.settings/checkstyle.xml")
        configProperties = [
            'checkstyle.cache.file': "${buildDir}/checkstyle.cache",
        ]
        ignoreFailures = true
        showViolations = true
    }
    publishing {
        publications {
            maven(MavenPublication) {
                groupId 'org.seage'
                // version '1.0.0rc1'
                from(components.java)
            }
        }
        repositories {
            maven {
                credentials {
                    username = project.findProperty('username') ?: ''
                    password = project.findProperty('password') ?: ''
                }

                url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            }
        }
    }
    signing {
        // sign configurations.archives
        sign publishing.publications.maven
    }
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives javadocJar, sourcesJar
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    // Add all relevant sourcesets from the subprojects
    subprojects.each {
       sourceSets it.sourceSets.main
    }

    reports {
      xml.enabled true
      html.enabled true
      csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

// checkstyle {
//   toolVersion "8.4.0"
// }

sonarqube {
    properties {
        property 'sonar.sourceEncoding', "UTF-8"
        property 'sonar.coverage.jacoco.xmlReportPaths', 
            "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"

    }
}

spotbugs {
  toolVersion = '4.2.2'
    ignoreFailures = true
    showStackTraces = false
    showProgress = true
    effort = 'default'
    reportLevel = 'default'
    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
    omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/spotbugs")
    // includeFilter = file("include.xml")
    // excludeFilter = file("exclude.xml")
    // baselineFile = file("baseline.xml")
    // onlyAnalyze = [ 'com.foobar.MyClass', 'com.foobar.mypkg.*' ]
    maxHeapSize = '1g'
// extraArgs = [ '-nested:false' ]
// jvmArgs = [ '-Duser.language=ja' ]
}

